#
# Copyright (c) 2020-2023 Nordic Semiconductor ASA
#
# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
#

function(generate_dfu_zip)
  set(oneValueArgs OUTPUT TYPE TARGET APPNAME SOC BOARD)
  set(multiValueArgs BIN_FILES SCRIPT_PARAMS IMAGES)
  cmake_parse_arguments(GENZIP "" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

  if (NOT(
    GENZIP_BIN_FILES AND
    GENZIP_SCRIPT_PARAMS AND
    GENZIP_OUTPUT AND
    GENZIP_TYPE AND
    GENZIP_APPNAME AND
    GENZIP_SOC AND
    GENZIP_BOARD AND
    GENZIP_IMAGES
    ))
    message(FATAL_ERROR "Missing required param")
  endif()

  sysbuild_get(app_core_output_meta IMAGE ${DEFAULT_IMAGE} VAR CONFIG_BUILD_OUTPUT_META KCONFIG)

  if(app_core_output_meta)
    sysbuild_get(app_core_prefix_name IMAGE ${DEFAULT_IMAGE} VAR CONFIG_KERNEL_BIN_NAME KCONFIG)
    set(meta_argument ${CMAKE_BINARY_DIR}/${DEFAULT_IMAGE}/zephyr/${app_core_prefix_name}.meta)
  endif()

  # Generate list of target image binary directories and zephyr configuration files.
  set(image_binary_dirs)
  set(dotconfigs)
  foreach(image ${GENZIP_IMAGES})
    ExternalProject_Get_Property(${GENZIP_IMAGES} BINARY_DIR)
    list(APPEND image_binary_dirs ${BINARY_DIR})
    list(APPEND dotconfigs ${BINARY_DIR}/zephyr/.config)
  endforeach()

  # Mark the input bin files and zephyr configuration files as being generated by other builds.
  set_property(SOURCE ${GENZIP_BIN_FILES} ${dotconfigs} PROPERTY GENERATED TRUE)

  # Add empty process which is used as a source cmake target for generating the needed binary
  # images for the packager.
  add_custom_command(OUTPUT ${GENZIP_BIN_FILES} COMMAND ${CMAKE_COMMAND} -E true DEPENDS ${GENZIP_IMAGES})

  # Add cmake sub-process which will generate the zip package, this needs to be a sub-process so
  # that it can read the current image configuration directly from the config files rather than
  # fixing it here, which prevents e.g. generating zips with outdated files or configuration
  # options. In addition, a monitor file is used which will monitor for Kconfigs which, if
  # changed, should force a re-generation of the zip package.
  add_custom_command(OUTPUT ${GENZIP_OUTPUT}
      COMMAND ${CMAKE_COMMAND}
      -DZEPHYR_BASE=${ZEPHYR_BASE}
      -DDOTCONFIGS=${dotconfigs}
      -DIMAGE_BINARY_DIRS=${image_binary_dirs}
      -DOUTPUT=${GENZIP_OUTPUT}
      -DAPP_NAME=${GENZIP_APPNAME}
      -DMETA_ARGUMENT=${meta_argument}
      -DSCRIPT_PARAMS=${GENZIP_SCRIPT_PARAMS}
      -DTYPE=${GENZIP_TYPE}
      -DBOARD=${GENZIP_BOARD}
      -DSOC=${GENZIP_SOC}
      -DMONITOR_FILE=${CMAKE_BINARY_DIR}/zip_monitor.mon
      -P ${CMAKE_CURRENT_LIST_DIR}/generate_zip.cmake
      DEPENDS ${meta_info_file} ${GENZIP_IMAGES} ${dotconfigs} ${GENZIP_BIN_FILES}
  )

  set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS ${CMAKE_BINARY_DIR}/zip_monitor.mon)

  add_custom_target(dfu_zip ALL DEPENDS ${GENZIP_OUTPUT})
endfunction()
